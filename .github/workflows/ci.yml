name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build
    - name: Formatting
      run: cargo fmt --all -- --check
    - name: Linting
      run: cargo clippy -- -D warnings
    - name: Run tests
      run: cargo test --all-features

  windows-build:
    runs-on: windows-latest
    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})
    env:
      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        target: [
            i686-pc-windows-gnu,
            i686-pc-windows-msvc,
            x86_64-pc-windows-gnu,
            x86_64-pc-windows-msvc,
        ]
        cfg_release_channel: [nightly]

    steps:
      - name: checkout
        uses: actions/checkout@v2

        # Run build
      - name: Install Rustup using win.rustup.rs
        run: |
          # disable download progress bar
          $ProgressPreference = "SilentlyContinue"
          Invoke-WebRequest https://win.rustup.rs/ -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-host=x86_64-pc-windows-msvc --default-toolchain=none
          del rustup-init.exe
          rustup target add ${{ matrix.target }}
        shell: powershell

      - name: Add mingw32 to path for i686-gnu
        run: |
          echo "C:\msys64\mingw32\bin" >> $GITHUB_PATH
        if: matrix.target == 'i686-pc-windows-gnu' && matrix.channel == 'nightly'
        shell: bash

      - name: Add mingw64 to path for x86_64-gnu
        run: echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
        if: matrix.target == 'x86_64-pc-windows-gnu' && matrix.channel == 'nightly'
        shell: bash

      - name: build
        run: |
          rustc -Vv
          cargo -V
          cargo build
        shell: cmd

      - name: test
        run: cargo test
        shell: cmd
